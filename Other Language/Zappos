#bermuda triangle
float area(int x1, int y1, int x2, int y2, int x3, int y3)
{
   return abs((x1*(y2-y3) + x2*(y3-y1)+ x3*(y1-y2))/2.0);
}

bool isInside(int x1, int y1, int x2, int y2, int x3, int y3, int x, int y)
{   
   float A = area (x1, y1, x2, y2, x3, y3);
   float A1 = area (x, y, x2, y2, x3, y3);
   float A2 = area (x1, y1, x, y, x3, y3);
   float A3 = area (x1, y1, x2, y2, x, y);   
   return (A == A1 + A2 + A3);
}

int foundInBermudatriangle(int x1, int y1, int x2, int y2, int x3, int y3, int px, int py, int bx, int by) {
    int res = 0;
    if ((y2 - y1) * x3 + (x1 - x2) * y3 + (x2 * y1 - x1 * y2)!=0) {
        if (isInside(x1,y1,x2,y2,x3,y3,px,py) && isInside(x1,y1,x2,y2,x3,y3,bx,by)) {
            res = 3;
        } else if(isInside(x1,y1,x2,y2,x3,y3,px,py)) {
            res = 1;
        } else if(isInside(x1,y1,x2,y2,x3,y3,bx,by)) {
            res = 2;
        } else {
            res = 4;
        }
    } else {
        res = 0;
    }
    return res;
}



#reverse
# Complete the function below.


def  reverseButPreserveWhitespace(reverseMe):
    return ' '.join([word[::-1] for word in 
                     reverseMe.split(' ')])


#set in matrix
class Graph:
    def __init__(self, row, col, g):
        self.ROW = row
        self.COL = col
        self.graph = g

    def isSafe(self, i, j, visited):
        return (i >= 0 and i < self.ROW and
                j >= 0 and j < self.COL and
                not visited[i][j] and self.graph[i][j])
             
    def DFS(self, i, j, visited):
        rowNbr = [-1, -1, -1,  0, 0,  1, 1, 1];
        colNbr = [-1,  0,  1, -1, 1, -1, 0, 1];
        visited[i][j] = True
        for k in range(8):
            if self.isSafe(i + rowNbr[k], j + colNbr[k], visited):
                self.DFS(i + rowNbr[k], j + colNbr[k], visited)
 
    def countIslands(self):
        visited = [[False for j in range(self.COL)]for i in range(self.ROW)]
        count = 0
        for i in range(self.ROW):
            for j in range(self.COL):
                if visited[i][j] == False and self.graph[i][j] ==1:
                    self.DFS(i, j, visited)
                    count += 1
        return count

def  numberOfGroups(venue):
    row = len(venue)
    col = len(venue[0])
    g= Graph(row, col, venue)
    return g.countIslands()
    
    
#lowest number
void buildLowestNumberRec(string str, int n, string &res)
{
    if (n == 0)
    {
        res.append(str);
        return;
    } 
    int len = str.length();
    if (len <= n)
        return;
    int minIndex = 0;
    for (int i = 1; i<=n ; i++)
        if (str[i] < str[minIndex])
            minIndex = i;
 
    res.push_back(str[minIndex]);
    string new_str = str.substr(minIndex+1, len-minIndex);
    buildLowestNumberRec(new_str, n-minIndex, res);
}

string improbabilityCalculator(string coordinates, int remove) {
    if (remove > coordinates.length()) {
        return "0";
    }
    if(remove == 0) {
        return coordinates;
    }
    string res = "";
    buildLowestNumberRec(coordinates, remove, res);
    return res;
}


#if numbers from 2 arrays add to sum

from collections import defaultdict

def  GigawattPower(batteryOne, batteryTwo, gigawattTarget):
    c = {}
    c=defaultdict(lambda:0,c)
    for i in batteryOne:
       c[gigawattTarget - i] = 1
        
    for j in batteryTwo:
            if c[j] == 1:
                return True
    return False



